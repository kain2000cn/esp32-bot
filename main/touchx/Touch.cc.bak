#include "Touch.h"
#include <esp_log.h>
#include "driver/touch_pad.h"

#define TAG "TouchSensor"

#define ESP32_S3_Normal 0

#if ESP32_S3_Normal
#define TOUCH_BUTTON_NUM 12
#else
#define TOUCH_BUTTON_NUM 14
#endif

#define TOUCH_CHANGE_CONFIG 0

static const touch_pad_t button[TOUCH_BUTTON_NUM] = {
    TOUCH_PAD_NUM1,
    TOUCH_PAD_NUM2,
    TOUCH_PAD_NUM3,
    TOUCH_PAD_NUM4,
    TOUCH_PAD_NUM5,
    TOUCH_PAD_NUM6,
    TOUCH_PAD_NUM7,
    TOUCH_PAD_NUM8,
    TOUCH_PAD_NUM9,
    TOUCH_PAD_NUM10,
    TOUCH_PAD_NUM11,
    TOUCH_PAD_NUM12,
    TOUCH_PAD_NUM13,
    TOUCH_PAD_NUM14};

namespace touch_sensor_manager
{

    std::string Touch::Initialize()
    {
        /* Initialize touch pad peripheral. */
        touch_pad_init();
        for (int i = 0; i < TOUCH_BUTTON_NUM; i++)
        {
            touch_pad_config(button[i]);
        }

#if TOUCH_CHANGE_CONFIG
        /* If you want change the touch sensor default setting, please write here(after initialize). There are examples: */
        touch_pad_set_measurement_interval(TOUCH_PAD_SLEEP_CYCLE_DEFAULT);
        touch_pad_set_charge_discharge_times(TOUCH_PAD_MEASURE_CYCLE_DEFAULT);
        touch_pad_set_voltage(TOUCH_PAD_HIGH_VOLTAGE_THRESHOLD, TOUCH_PAD_LOW_VOLTAGE_THRESHOLD, TOUCH_PAD_ATTEN_VOLTAGE_THRESHOLD);
        touch_pad_set_idle_channel_connect(TOUCH_PAD_IDLE_CH_CONNECT_DEFAULT);
        for (int i = 0; i < TOUCH_BUTTON_NUM; i++)
        {
            touch_pad_set_cnt_mode(button[i], TOUCH_PAD_SLOPE_DEFAULT, TOUCH_PAD_TIE_OPT_DEFAULT);
        }
#endif
        /* Denoise setting at TouchSensor 0. */
        touch_pad_denoise_t denoise = {
            /* The bits to be cancelled are determined according to the noise level. */
            .grade = TOUCH_PAD_DENOISE_BIT4,
            .cap_level = TOUCH_PAD_DENOISE_CAP_L4,
        };
        touch_pad_denoise_set_config(&denoise);
        touch_pad_denoise_enable();
        ESP_LOGI(TAG, "Denoise function init");

        /* Enable touch sensor clock. Work mode is "timer trigger". */
        touch_pad_set_fsm_mode(TOUCH_FSM_MODE_TIMER);
        touch_pad_fsm_start();

        return "Touch sensor Initialize.";
    }

    void Touch::Update()
    {
        printf("Touch Sensor read, the output format is: \nTouchpad num:[raw data]\n\n");
        uint32_t touch_value;
        for (int i = 0; i < TOUCH_BUTTON_NUM; i++)
        {
            touch_pad_read_raw_data(button[i], &touch_value); // read raw data.
            // printf("T%d: [%4" PRIu32 "] ", button[i], touch_value);
        }
        printf("\n");
    }

}
